
//! Autogenerated weights for `erc20`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-09-18, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `cryptonuser14079-LT`, CPU: `11th Gen Intel(R) Core(TM) i5-1155G7 @ 2.50GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-template
// benchmark
// pallet
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=erc20
// --extrinsic=*
// --wasm-execution=compiled
// --output
// pallets/erc20/src/weights.rs
// --template
// ./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `erc20`.
pub trait WeightInfo {
	fn transfer() -> Weight;
	fn transfer_from() -> Weight;
	fn approve() -> Weight;
	fn mint() -> Weight;
	fn burn() -> Weight;
}

/// Weights for `erc20` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ERCModule::Balances` (r:2 w:2)
	/// Proof: `ERCModule::Balances` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `119`
		//  Estimated: `6052`
		// Minimum execution time: 18_319_000 picoseconds.
		Weight::from_parts(19_342_000, 6052)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ERCModule::Allowances` (r:1 w:1)
	/// Proof: `ERCModule::Allowances` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `ERCModule::Balances` (r:2 w:2)
	/// Proof: `ERCModule::Balances` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn transfer_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245`
		//  Estimated: `6052`
		// Minimum execution time: 28_886_000 picoseconds.
		Weight::from_parts(30_114_000, 6052)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `ERCModule::Allowances` (r:0 w:1)
	/// Proof: `ERCModule::Allowances` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_752_000 picoseconds.
		Weight::from_parts(10_985_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `ERCModule::Minters` (r:1 w:0)
	/// Proof: `ERCModule::Minters` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ERCModule::Balances` (r:1 w:1)
	/// Proof: `ERCModule::Balances` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ERCModule::TotalSupply` (r:0 w:1)
	/// Proof: `ERCModule::TotalSupply` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `218`
		//  Estimated: `3521`
		// Minimum execution time: 12_860_000 picoseconds.
		Weight::from_parts(13_182_000, 3521)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `ERCModule::Balances` (r:1 w:1)
	/// Proof: `ERCModule::Balances` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ERCModule::TotalSupply` (r:0 w:1)
	/// Proof: `ERCModule::TotalSupply` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `119`
		//  Estimated: `3521`
		// Minimum execution time: 10_277_000 picoseconds.
		Weight::from_parts(10_597_000, 3521)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `ERCModule::Balances` (r:2 w:2)
	/// Proof: `ERCModule::Balances` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `119`
		//  Estimated: `6052`
		// Minimum execution time: 18_319_000 picoseconds.
		Weight::from_parts(19_342_000, 6052)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ERCModule::Allowances` (r:1 w:1)
	/// Proof: `ERCModule::Allowances` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	/// Storage: `ERCModule::Balances` (r:2 w:2)
	/// Proof: `ERCModule::Balances` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	fn transfer_from() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245`
		//  Estimated: `6052`
		// Minimum execution time: 28_886_000 picoseconds.
		Weight::from_parts(30_114_000, 6052)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: `ERCModule::Allowances` (r:0 w:1)
	/// Proof: `ERCModule::Allowances` (`max_values`: None, `max_size`: Some(104), added: 2579, mode: `MaxEncodedLen`)
	fn approve() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_752_000 picoseconds.
		Weight::from_parts(10_985_000, 0)
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: `ERCModule::Minters` (r:1 w:0)
	/// Proof: `ERCModule::Minters` (`max_values`: None, `max_size`: Some(48), added: 2523, mode: `MaxEncodedLen`)
	/// Storage: `ERCModule::Balances` (r:1 w:1)
	/// Proof: `ERCModule::Balances` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ERCModule::TotalSupply` (r:0 w:1)
	/// Proof: `ERCModule::TotalSupply` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `218`
		//  Estimated: `3521`
		// Minimum execution time: 12_860_000 picoseconds.
		Weight::from_parts(13_182_000, 3521)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `ERCModule::Balances` (r:1 w:1)
	/// Proof: `ERCModule::Balances` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	/// Storage: `ERCModule::TotalSupply` (r:0 w:1)
	/// Proof: `ERCModule::TotalSupply` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `119`
		//  Estimated: `3521`
		// Minimum execution time: 10_277_000 picoseconds.
		Weight::from_parts(10_597_000, 3521)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}